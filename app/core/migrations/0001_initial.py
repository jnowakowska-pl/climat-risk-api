# Generated by Django 4.2.16 on 2024-11-05 02:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('token', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('token_expiry', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'db_table': 'users',
                'db_table_comment': 'Stores users that log in',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MapQueries',
            fields=[
                ('query_id', models.AutoField(primary_key=True, serialize=False)),
                ('query_text', models.TextField()),
                ('query_type', models.IntegerField()),
            ],
            options={
                'db_table': 'map_queries',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('permission_id', models.AutoField(primary_key=True, serialize=False)),
                ('permission_name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'permissions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SessionLogs',
            fields=[
                ('session_id', models.AutoField(primary_key=True, serialize=False)),
                ('login_time', models.DateTimeField(blank=True, null=True)),
                ('logout_time', models.DateTimeField(blank=True, null=True)),
                ('session_duration', models.DurationField(blank=True, null=True)),
                ('session_status', models.CharField(blank=True, max_length=50, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'session_logs',
                'db_table_comment': 'Tracks user sessions: logged in, logged out, session expired',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserGroups',
            fields=[
                ('group_id', models.AutoField(primary_key=True, serialize=False)),
                ('group_name', models.CharField(max_length=100)),
                ('group_description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('permission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.permissions')),
            ],
            options={
                'db_table': 'user_groups',
                'db_table_comment': 'Stores user groups and their descriptions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UiLogs',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('action', models.CharField(max_length=255)),
                ('action_details', models.TextField(blank=True, null=True)),
                ('page_url', models.CharField(blank=True, max_length=255, null=True)),
                ('ip_address', models.CharField(blank=True, max_length=45, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.sessionlogs')),
            ],
            options={
                'db_table': 'ui_logs',
                'db_table_comment': 'Stores detailed user actions logs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('notification_id', models.AutoField(primary_key=True, serialize=False)),
                ('notification_message', models.TextField()),
                ('notification_type', models.CharField(blank=True, max_length=50, null=True)),
                ('is_read', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'db_table_comment': 'Stores notifications to the user according with the data updating',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MetadataLogs',
            fields=[
                ('metadata_id', models.AutoField(primary_key=True, serialize=False)),
                ('log_id', models.IntegerField(blank=True, null=True)),
                ('browser_info', models.TextField(blank=True, null=True)),
                ('os_info', models.TextField(blank=True, null=True)),
                ('device_type', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.sessionlogs')),
            ],
            options={
                'db_table': 'metadata_logs',
                'db_table_comment': 'Stores logging events features',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MapViews',
            fields=[
                ('map_view_id', models.AutoField(primary_key=True, serialize=False)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('zoom_level', models.IntegerField(blank=True, null=True)),
                ('layers', models.TextField()),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('query', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.mapqueries')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.sessionlogs')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'map_views',
                'db_table_comment': 'Stores map feautures in the user log session: center coordinate, zoom details, current added layers and queries.',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='mapqueries',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.sessionlogs'),
        ),
        migrations.AddField(
            model_name='mapqueries',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='FavoriteContent',
            fields=[
                ('favorite_id', models.AutoField(primary_key=True, serialize=False)),
                ('content_type', models.CharField(max_length=50)),
                ('content_id', models.IntegerField()),
                ('saved_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'favorite_content',
                'db_table_comment': 'Stores user favorite content on the platform',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ErrorLogs',
            fields=[
                ('error_id', models.AutoField(primary_key=True, serialize=False)),
                ('error_message', models.TextField()),
                ('error_code', models.IntegerField(blank=True, null=True)),
                ('file', models.CharField(blank=True, max_length=255, null=True)),
                ('line', models.IntegerField(blank=True, null=True)),
                ('stack_trace', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.sessionlogs')),
            ],
            options={
                'db_table': 'error_logs',
                'db_table_comment': 'Stores errors during the users session',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuditLogs',
            fields=[
                ('audit_id', models.AutoField(primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=255)),
                ('target_table', models.CharField(blank=True, max_length=100, null=True)),
                ('target_id', models.IntegerField(blank=True, null=True)),
                ('old_value', models.TextField(blank=True, null=True)),
                ('new_value', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.sessionlogs')),
            ],
            options={
                'db_table': 'audit_logs',
                'db_table_comment': 'Stores user activity logs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttachedFiles',
            fields=[
                ('file_id', models.AutoField(primary_key=True, serialize=False)),
                ('file_name', models.CharField(max_length=255)),
                ('file_path', models.CharField(max_length=255)),
                ('file_type', models.CharField(blank=True, max_length=100, null=True)),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'attached_files',
                'db_table_comment': 'Stores user attached files and feautures',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='users',
            name='permission_group',
            field=models.ForeignKey(blank=True, db_column='permission_group', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.usergroups'),
        ),
        migrations.AddField(
            model_name='users',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
